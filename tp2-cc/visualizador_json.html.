<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Monitoriza√ß√£o de Redes Distribu√≠das</title>
  <style>
    body {
      font-family: 'Arial', sans-serif;
      margin: 0;
      padding: 0;
      background-color: #f7f9fc;
      color: #333;
    }

    header {
      background-color: #0062cc;
      color: #fff;
      padding: 20px 0;
      text-align: center;
      border-bottom: 4px solid #0056b3;
    }

    header h1 {
      margin: 0;
      font-size: 2.5em;
    }

    header p {
      margin: 10px 0 0;
      font-size: 1.2em;
    }

    main {
      max-width: 1200px;
      margin: 40px auto;
      padding: 20px;
      background-color: #fff;
      border-radius: 8px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }

    .upload-container {
      text-align: center;
      margin-bottom: 30px;
    }

    .upload-container input[type="file"] {
      display: none;
    }

    .upload-container label {
      background-color: #28a745;
      color: #fff;
      padding: 15px 30px;
      font-size: 1.2em;
      border-radius: 5px;
      cursor: pointer;
      transition: background-color 0.3s ease, transform 0.3s ease;
    }

    .upload-container label:hover {
      background-color: #218838;
      transform: scale(1.05);
    }

    .day-selector {
      text-align: center;
      margin-bottom: 20px;
    }

    .day-selector select {
      padding: 10px;
      font-size: 1.1em;
      border: 1px solid #ccc;
      border-radius: 5px;
      transition: border-color 0.3s ease;
    }

    .day-selector select:focus {
      border-color: #007bff;
      outline: none;
    }

    table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 20px;
      transition: all 0.3s ease;
    }

    table th, table td {
      border: 1px solid #ddd;
      padding: 10px;
      text-align: center;
      transition: background-color 0.3s ease;
    }

    table th {
      background-color: #007bff;
      color: white;
      font-weight: bold;
      font-size: 1.1em;
    }

    table tr:nth-child(even) {
      background-color: #f1f9ff;
    }

    table tr:nth-child(odd) {
      background-color: #e9f2ff;
    }

    table tr:hover {
      background-color: #d1e7f7;
    }

    .icon {
      display: inline-block;
      width: 20px;
      height: 20px;
      text-align: center;
      line-height: 20px;
      border-radius: 50%;
      color: white;
      font-size: 12px;
      font-weight: bold;
      transition: transform 0.3s ease;
    }

    .icon.metric {
      background-color: #28a745;
    }

    .icon.alert {
      background-color: #dc3545;
    }

    .metric-value {
      font-weight: bold;
    }

    footer {
      background-color: #0062cc;
      color: #fff;
      text-align: center;
      padding: 10px 0;
      margin-top: 40px;
    }

    footer p {
      margin: 0;
      font-size: 1.1em;
    }

    footer .footer-bar {
      height: 4px;
      background-color: #0056b3;
      margin-top: 10px;
    }

  </style>
</head>
<body>
  <header>
    <h1>Monitoriza√ß√£o de Redes Distribu√≠das</h1>
    <p>Solu√ß√µes inovadoras para gerir e otimizar suas redes</p>
  </header>

  <main>
    <div class="upload-container">
      <label for="jsonFileInput">üìÇ Carregar Arquivo JSON</label>
      <input type="file" id="jsonFileInput" accept=".json">
    </div>

    <div class="day-selector hidden" id="daySelector">
      <p>Selecione um dia para visualizar as tarefas:</p>
      <select id="dayDropdown"></select>
    </div>

    <table id="dataTable" class="hidden">
      <thead>
        <tr>
          <th>√çcone</th>
          <th>PC</th>
          <th>Seq Num</th>
          <th>Timestamp</th>
          <th>Task Type</th>
          <th>Metric Value</th>
        </tr>
      </thead>
      <tbody></tbody>
    </table>
  </main>

  <footer>
    <p>&copy; 2024 <span style="color: #ffcc00;">Monitoriza√ß√£o de Redes Distribu√≠das</span>. Todos os direitos reservados.</p>
    <div class="footer-bar"></div>
  </footer>

  <script>
    const jsonFileInput = document.getElementById('jsonFileInput');
    const daySelector = document.getElementById('daySelector');
    const dayDropdown = document.getElementById('dayDropdown');
    const dataTable = document.getElementById('dataTable');

    let jsonData = [];
    let pcName = '';
    let isAlert = false; // Variable to check if the folder is for alerts

    jsonFileInput.addEventListener('change', function(event) {
      const file = event.target.files[0];
      if (file) {
        pcName = file.name.split('.')[0]; // Extrai o nome do PC do nome do arquivo
        const reader = new FileReader();
        reader.onload = function(e) {
          try {
            jsonData = JSON.parse(e.target.result);
            // Assume a folder name to check if it's "alert" or "metric"
            const folderName = file.name.split('/')[0]; // Adjust this according to the file structure
            isAlert = folderName.toLowerCase().includes("alerts");
            
            const days = new Set(
              jsonData.map(item => item.timestamp.split('T')[0])
            );
            populateDayDropdown([...days]);
            daySelector.classList.remove('hidden');
          } catch (error) {
            alert('Erro ao ler o arquivo JSON. Verifique o formato.');
          }
        };
        reader.readAsText(file);
      }
    });

    dayDropdown.addEventListener('change', function() {
      const selectedDay = dayDropdown.value;
      const filteredData = jsonData.filter(item =>
        item.timestamp.startsWith(selectedDay)
      );
      displayTable(filteredData);
    });

    function populateDayDropdown(days) {
      dayDropdown.innerHTML = '<option value="">Selecione um dia</option>';
      days.forEach(day => {
        const option = document.createElement('option');
        option.value = day;
        option.textContent = day;
        dayDropdown.appendChild(option);
      });
    }

    function getTaskTypeName(taskType) {
      switch (taskType) {
        case 0: return 'CPU';
        case 1: return 'RAM';
        case 2: return 'Latency';
        case 3: return 'Bandwidth';
        case 4: return 'Jitter';
        case 5: return 'Packet Loss';
        case 6: return 'Packets Per Second';
        default: return 'Unknown';
      }
    }

    function formatMetricValue(taskType, value) {
      switch (taskType) {
        case 0:
        case 1:
        case 5:
          return `${value.toFixed(2)} %`; // Percentage for CPU, RAM, Packet Loss
        case 2:
        case 4:
          return `${value.toFixed(2)} ms`; // Milliseconds for Latency, Jitter
        case 3:
          return `${value.toFixed(2)} Mbps`; // Mbps for Bandwidth
        case 6:
          return `${value.toFixed(2)} pps`; // Packets Per Second
        default:
          return value;
      }
    }

    function displayTable(data) {
      const tbody = dataTable.querySelector('tbody');
      tbody.innerHTML = '';
      data.forEach(item => {
        const row = document.createElement('tr');
        const taskTypeName = getTaskTypeName(item.task_type);
        const formattedMetric = formatMetricValue(item.task_type, item.metric_value);

        row.innerHTML = `
          <td><span class="icon ${isAlert ? 'alert' : 'metric'}">${isAlert ? 'A' : 'M'}</span></td>
          <td>${pcName}</td>
          <td>${item.seq_num}</td>
          <td>${item.timestamp}</td>
          <td>${taskTypeName}</td>
          <td class="metric-value">${formattedMetric}</td>
        `;
        tbody.appendChild(row);
      });
      dataTable.classList.remove('hidden');
    }
  </script>
</body>
</html>
